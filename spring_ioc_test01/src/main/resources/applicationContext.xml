<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
       xsi:schemaLocation="
       http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/mvc
       http://www.springframework.org/schema/mvc/spring-mvc.xsd
       http://dubbo.apache.org/schema/dubbo
       http://dubbo.apache.org/schema/dubbo/dubbo.xsd">

    <context:property-placeholder></context:property-placeholder>
    <!--    <mvc:annotation-driven></mvc:annotation-driven>-->
    <!--    <dubbo:annotation></dubbo:annotation>-->

    <import resource="classpath:applicationContext-user.xml"></import>
    <import resource="classpath:applicationContext-order.xml"></import>

    <bean class="com.puxinxiaolin.processor.TimeLogBeanPostProcessor"></bean>

<!--    <bean class="com.puxinxiaolin.processor.MyBeanPostProcessor"></bean>-->

<!--    <bean class="com.puxinxiaolin.processor.MyComponentBeanFactoryPostProcessor"></bean>-->

<!--    <bean class="com.puxinxiaolin.processor.MyBeanFactoryPostProcessor"></bean>-->
<!--    <bean class="com.puxinxiaolin.processor.MyBeanDefinitionRegistryPostProcessor"></bean>-->


    <!-- mybatis -->
    <!-- 静态工厂方法 -->
<!--    <bean id="in" class="org.apache.ibatis.io.Resources" factory-method="getResourceAsStream">-->
<!--        <constructor-arg name="resource" value="mybatis-config.xml"></constructor-arg>-->
<!--    </bean>-->
<!--    &lt;!&ndash; 无参构造实例化 &ndash;&gt;-->
<!--    <bean id="builder" class="org.apache.ibatis.session.SqlSessionFactoryBuilder"></bean>-->
<!--    &lt;!&ndash; 实例工厂方法 &ndash;&gt;-->
<!--    <bean id="SqlSessionFactory" factory-bean="builder" factory-method="build">-->
<!--        <constructor-arg name="inputStream" ref="in"></constructor-arg>-->
<!--    </bean>-->

    <!-- 日期 -->
<!--    <bean id="simpleDateFormat" class="java.text.SimpleDateFormat">-->
<!--        <constructor-arg name="pattern" value="yyyy-MM-dd HH:mm:ss"></constructor-arg>-->
<!--    </bean>-->
<!--    <bean id="date" factory-bean="simpleDateFormat" factory-method="parse">-->
<!--        <constructor-arg name="source" value="2023-08-07 12:00:00"></constructor-arg>-->
<!--    </bean>-->

    <!-- 配置druid -->
<!--    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">-->
<!--        <property name="driverClassName" value="com.mysql.cj.jdbc.Driver"></property>-->
<!--        <property name="url" value="jdbc:mysql://localhost:3306/mysql"></property>-->
<!--        <property name="username" value="root"></property>-->
<!--        <property name="password" value="root"></property>-->
<!--    </bean>-->

    <!-- 配置mysql -->
<!--    <bean id="clazz" class="java.lang.Class" factory-method="forName">-->
<!--        <constructor-arg name="className" value="com.mysql.cj.jdbc.Driver"></constructor-arg>-->
<!--    </bean>-->
<!--    <bean id="connection" class="java.sql.DriverManager" factory-method="getConnection" scope="prototype">-->
<!--        <constructor-arg name="url" value="jdbc:mysql://localhost:3306/mysql"></constructor-arg>-->
<!--        <constructor-arg name="user" value="root"></constructor-arg>-->
<!--        <constructor-arg name="password" value="root"></constructor-arg>-->
<!--    </bean>-->

    <!--  id、name  -->
    <!--  如果不配置 id，默认使用全限类名作为 bean 的名称  -->
    <!--    <bean class="com.puxinxiaolin.service.impl.UserServiceImpl">-->
    <!-- 配置id（如果还有别名，id 优先于别名） -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl">-->
    <!--  配置别名（默认第一个就是 bean 名称）  -->
    <!--    <bean name="us, US" class="com.puxinxiaolin.service.impl.UserServiceImpl" scope="prototype">-->
    <!-- 单独配置别名 -->
    <!--    <alias name="userService" alias="us"></alias>-->
    <!--    <alias name="userService" alias="US"></alias>-->

    <!-- scope -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl" scope="prototype">-->
    <!-- singleton（默认） -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl">-->
    <!-- lazy-init（默认是false） -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl">-->
    <!-- init-method、destroy-method -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl" init-method="init" destroy-method="destroy">-->
    <!-- bean的无参（默认） / 有参构造 -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl">-->
    <!--        &lt;!&ndash; 有参构造设置参数值 &ndash;&gt;-->
    <!--        <constructor-arg name="name" value="lin"></constructor-arg>-->
    <!--        &lt;!&ndash; 注入属性，在 userServiceImpl 调用 userDao &ndash;&gt;-->
    <!--        <property name="userDao" ref="userDao"></property>-->
    <!--    </bean>-->

    <!-- 3.1 静态工厂方法 / 实例工厂方法 -->
    <!-- constructor-arg 不仅可以设置构造函数的参数，还能设置构造 bean 方法的参数 -->
    <!-- 不是把MyBeanFactory1作为对象，而是通过这个工厂的静态方法的返回值作为对象，bean名称为userDao1 -->
<!--    <bean id="userDao1" class="com.puxinxiaolin.factory.MyBeanFactory1" factory-method="userDao">-->
<!--        <constructor-arg name="name" value="xiaolin"></constructor-arg>-->
<!--        <constructor-arg name="age" value="20"></constructor-arg>-->
<!--    </bean>-->
<!--    &lt;!&ndash; 实例工厂方法需要先有对象才能通过对象调用方法 &ndash;&gt;-->
<!--    <bean id="myBeanFactory2" class="com.puxinxiaolin.factory.MyBeanFactory2"></bean>-->
<!--    <bean id="userDao2" factory-bean="myBeanFactory2" factory-method="userDao">-->
<!--        <constructor-arg name="userName" value="JAVAer xiaolin"></constructor-arg>-->
<!--    </bean>-->

<!--    &lt;!&ndash; 3.2 FactoryBean &ndash;&gt;-->
<!--    &lt;!&ndash; 返回的对象是重写的 getObject 方法返回的对象 &ndash;&gt;-->
<!--    <bean id="userDao3" class="com.puxinxiaolin.factory.MyBeanFactory3"></bean>-->


    <!-- 3. 注入集合等类型 -->
    <!-- 注入 List<String> -->
    <!--    <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl">-->
    <!--        <property name="stringList">-->
    <!--            <list>-->
    <!--                <value>A</value>-->
    <!--                <value>B</value>-->
    <!--                <value>C</value>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="userDaoList">-->
    <!--            <list>-->
    <!--                <ref bean="userDao"></ref>-->
    <!--                <ref bean="userDao1"></ref>-->
    <!--            </list>-->
    <!--        </property>-->
    <!--        <property name="stringSet">-->
    <!--            <set>-->
    <!--                <value>a</value>-->
    <!--                <value>b</value>-->
    <!--                <value>c</value>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--        <property name="userDaoSet">-->
    <!--            <set>-->
    <!--                <ref bean="userDao"></ref>-->
    <!--                <ref bean="userDao1"></ref>-->
    <!--            </set>-->
    <!--        </property>-->
    <!--        <property name="map">-->
    <!--            <map>-->
    <!--                <entry key="one" value-ref="userDao3"></entry>-->
    <!--                <entry key="two" value-ref="userDao5"></entry>-->
    <!--            </map>-->
    <!--        </property>-->
    <!--        <property name="properties">-->
    <!--            <props>-->
    <!--                <prop key="one">NO.1</prop>-->
    <!--                <prop key="two">NO.2</prop>-->
    <!--            </props>-->
    <!--        </property>-->
    <!--    </bean>-->

<!--    <bean id="userDao5" class="com.puxinxiaolin.dao.impl.UserDaoImpl"></bean>-->

<!--        <bean id="userDao" class="com.puxinxiaolin.dao.impl.UserDaoImpl"></bean>-->
<!--        <bean id="userService" class="com.puxinxiaolin.service.impl.UserServiceImpl"></bean>-->

<!--    <beans profile="dev">-->
<!--        <bean id="userService1" class="com.puxinxiaolin.service.impl.UserServiceImpl"></bean>-->
<!--    </beans>-->

<!--    <beans profile="test">-->
<!--        <bean id="userDao6" class="com.puxinxiaolin.dao.impl.UserDaoImpl"></bean>-->
<!--    </beans>-->

</beans>
